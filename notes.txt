The next set of grand challenges (VISIONS conference)

Generational computing grand challenge

Problem of legacy data sets (Fortran, Cobol) esp in science
Climate change - backtest against models & data collected a long time
ago.  Need environment that might not have been explicitly recorded
(e.g. location of monitoring stations may change over time - source of
IPCC controversy).  Want to apply modern
techniques - mapreduce over cobol?

Characteristics of a grand challenge
Diversity of solutions - cross-cutting across formal methods,
security, systems, social networking

Problem of lock-in - will facebook be around in 100 years time?  How
to get all of your stuff out?

Boom-bust cycle of centralization & decentralization
web hosting: tripod, geocities
email: individual servers, now hotmail, gmail
blogging - livejournal

what drives these moves?
towards centralization: ease of use
towards decentralization: proliferation of competitors, desire for customization

alternate model: wave of innovation that converges on some solution;
then next wave start

what will effect of platforms be - facebook API, etc.  Can we break
the cycle? f/b will still want to control consistent interface though

Previous work on storing data
Old manuscripts -> scan.  Still need to save originals though as may
contain information that can be revealed by future techniques (writing
in margins, on the back of pages)

Need to store data + code
e.g. Excel - migrating old data + formulas (environment)
Companies storing previous years' tax calculations & models
Excel formula language simple, declarative, extensible - but now
becoming more complex/brittle with vbscript

What to do about obsolete data formats?

Append-only data - object is a pointer.  Only add fields (a la
inheritance).  gives a kind of version control

Can compress by replacing duplicates with pointers (a la object serialization)
Move to offline storage

eg. pictures - contain immutable metadata about camera.  layer edits
on top - crops, color adjustment, etc.  layer albums on top of that

Memoise intermediate transformations - can throw away if space needed,
can always be reconstructed later

Transformation language for filesystems

Building rome in a day - photos contain metadata which allow lens
curvature to be corrected later.  permitting unanticipated future reuse.



old HTML rendering of archived web pages? (e.g. obsolete tags no
longer supported)
old mbox formats

provenance
copying vs. linking

Can facebook contain the whole world?

old tax models
lifestreaming / lifelogging

Archiving links, forms, search boxes on old websites (national
archives note on saved budget pages)


Sheet music as example of stored data
Ancient manuscripts preserve raw data - but need period instruments
(hardware) and knowledge of period performance practice (program) in order to reproduce
living music
